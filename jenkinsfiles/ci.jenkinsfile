@Library('jenkinslib') _
def tools = new org.devops.tools()
def build = new org.devops.build()
def deploy = new org.devops.deploy()
pipeline {
//     agent {
//         docker {
//              image 'maven:3.8.1-adoptopenjdk-11'
//            args '-v /root/.m2:/root/.m2'
//        }
//     }

    agent any
    parameters {
        choice(name: 'BRANCH', choices: ['main','master'], description: 'branch choice')
        choice(name: 'srcUrl', choices: ['git@github.com:jenkins-docs/simple-java-maven-app.git','git@github.com:fallenjlz/Jenkins-test.git'], description: 'branch choice')
        choice(name: 'buildType', choices: ['gradle', 'mvn', 'ant'], description: 'Pick something')
        choice(name: 'buildShell', choices: ['-v',' -B -DskipTests clean package'], description: 'Pick something')
    }
    
    stages {
        
        stage ("checkout"){
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/${BRANCH}']], extensions: [], userRemoteConfigs: [[credentialsId: 'f3641d1f-0ffe-4732-82b2-7ec742e9a31a', url: '${srcUrl}']]])
            }
        }
        
         stage ("invoke share library"){
            steps {
                script{
                   currentBuild.displayName = "${BUILD_TAG}-${buildType}"
                   println("share test")
                   hello()
                   tools.PrintMes("share Library")
                    
                }
            }
         }
         
         stage ("build"){
            steps {
                script{
                   
                    sh '''
                        pwd
                        ls
                        env |grep -i build
                        '''
                    build.Build(buildType,buildShell)
                }
            }
         }
         
         stage ("deploy"){
            steps {
                script{
                    deploy.Deploy("-i /root/hosts all ","-m ping")
                }
            }
         }

    }
}

